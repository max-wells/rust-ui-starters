{
  "name": "command",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "command.rs",
      "content": "use leptos::*;\nuse std::rc::Rc;\nuse tailwind_fuse::*;\nuse wasm_bindgen::JsCast;\n\nuse crate::registry::ui::{\n    _shared::STYLES,\n    button::{Button, ButtonVariant},\n    dialog::{use_dialog_context, DialogComponent, DialogContent},\n};\n\n// TODO UI. If the list of CommandItems is empty, do not display the heading.\n// TODO UI. Handle arrow up / down to select item.\n\n#[derive(Clone)]\npub struct CommandContext {\n    pub search_query: ReadSignal<String>,\n    pub set_search_query: Rc<dyn Fn(String)>,\n}\n\n#[allow(unused_braces)]\n#[component]\npub fn CommandProvider(children: Children) -> impl IntoView {\n    let (search_query, set_search_query) = create_signal(String::new());\n    let context = CommandContext {\n        search_query,\n        set_search_query: Rc::new(set_search_query),\n    };\n\n    provide_context(context);\n\n    view! { {children()} }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn CommandDialog(children: Children) -> impl IntoView {\n    view! {\n        <DialogComponent>\n            <DialogContent class=\"overflow-hidden p-0 shadow-lg h-[300px]\">\n                <CommandProvider>\n                    <Command>{children()}</Command>\n                </CommandProvider>\n            </DialogContent>\n        </DialogComponent>\n    }\n}\n\n#[component]\npub fn CommandTrigger(children: Children) -> impl IntoView {\n    let dialog_context = use_dialog_context();\n    let dialog_ref = dialog_context.dialog_ref;\n\n    let show_command_dialog = move |_| {\n        if let Some(dialog) = dialog_ref.get() {\n            dialog.show_modal().unwrap();\n        }\n    };\n\n    view! {\n        <Button\n            on:click=show_command_dialog\n            variant=ButtonVariant::Outline\n            class=\"outline-none focus-visible:bg-accent/70\"\n        >\n            {children()}\n        </Button>\n    }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn Command(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n            class()\n        )\n    });\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn CommandList(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"max-h-[300px] overflow-y-auto overflow-x-hidden  shortfix-sidenav-todo-properly\",\n            class()\n        )\n    });\n\n    view! {\n        <ul {..attributes} class=class>\n            {children()}\n        </ul>\n    }\n}\n\n#[component]\npub fn CommandGroup(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(into)] heading: String,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <>\n            {Some(heading.clone())\n                .map(|heading: String| {\n                    view! {\n                        <h3 class=\"py-1 px-2 text-xs font-semibold text-muted-foreground\">\n                            {heading}\n                        </h3>\n                    }\n                })} <li {..attributes} class=class>\n                {children()}\n            </li>\n        </>\n    }\n}\n\n#[component]\npub fn CommandItem(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    href: &'static str,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            // STYLES.RING_FOCUS_VISIBLE,\n            STYLES.FLEX_ITEMS_CENTER,\n            STYLES.DISABLED_EVENTS_NONE,\n            STYLES.FOCUS_VISIBLE_BG_ACCCENT_70,\n            STYLES.HOVER_BG_ACCENT,\n            \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n            \"cursor-pointer outline-none\",\n            \"relative py-1.5 px-2 text-sm rounded-sm\",\n            class()\n        )\n    });\n\n    view! {\n        <a {..attributes} class=class href=href>\n            {children()}\n        </a>\n    }\n}\n\n#[allow(unused_variables)]\n#[component]\npub fn CommandInput(\n    #[prop(optional, into)] class: String,\n    #[prop(optional, into, default = \"text\")] r#type: &'static str,\n    #[prop(optional_no_strip)] value: Option<ReadSignal<String>>,\n    #[prop(optional)] placeholder: Option<&'static str>,\n    #[prop(optional)] name: Option<&'static str>,\n    #[prop(optional)] id: Option<&'static str>,\n    #[prop(optional)] min: Option<String>,\n    #[prop(optional)] step: Option<String>,\n    #[prop(optional)] max: Option<String>,\n    #[prop(optional)] autofocus: bool,\n    #[prop(optional)] node_ref: NodeRef<html::Input>,\n) -> impl IntoView {\n    let context = use_context::<CommandContext>().unwrap();\n\n    let class = tw_merge!(\n        STYLES.PLACEHOLDER_MUTED_FOREGROUND,\n        STYLES.FILE_STYLES,\n        STYLES.DISABLED_NOT_ALLOWED,\n        STYLES.RING_OFFSET_BG,\n        STYLES.BORDER_INPUT,\n        STYLES.FLEX_WIDTH_FULL,\n        \"outline-none\",\n        \"h-10 rounded-md bg-background px-3 py-2 text-sm\",\n        class\n    );\n\n    view! {\n        <input\n            type=r#type\n            class=class\n            name=name\n            id=id\n            placeholder=placeholder\n            value=value\n            min=min\n            step=step\n            max=max\n            node_ref=node_ref\n            autofocus=autofocus\n            on:input=move |e| (context\n                .set_search_query)(\n                e.target().unwrap().dyn_into::<web_sys::HtmlInputElement>().unwrap().value(),\n            )\n        />\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}