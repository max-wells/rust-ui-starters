{
  "name": "sticky_cursor_links",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "sticky_cursor_links.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\nuse wasm_bindgen::{prelude::Closure, JsCast};\nuse web_sys::{window, HtmlElement};\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[derive(Clone)]\nstruct StickyCursorLinksContext;\n\nfn provide_sticky_cursor_links_context() {\n    provide_context(StickyCursorLinksContext);\n\n    create_effect(|_| {\n        let document = window().unwrap().document().unwrap();\n        let cursor = document.query_selector(\".cursor\").unwrap().unwrap();\n        let cursor_clone = cursor.clone();\n\n        let links = document.query_selector_all(\"nav > .link\").unwrap();\n\n        for i in 0..links.length() {\n            let link = links.get(i).unwrap();\n            let link_clone = link.clone();\n\n            let closure = Closure::wrap(Box::new(move |e: web_sys::MouseEvent| {\n                let element = link_clone.dyn_ref::<web_sys::Element>().unwrap();\n                let span = element.query_selector(\".link > span\").unwrap().unwrap();\n                let html_element = span.dyn_ref::<HtmlElement>().unwrap();\n                let x = e.offset_x() as f64;\n                let y = e.offset_y() as f64;\n                let width = element.client_width() as f64;\n                let height = element.client_height() as f64;\n                let move_amount = 25.0;\n                let x_move = (x / width) * (move_amount * 2.0) - move_amount;\n                let y_move = (y / height) * (move_amount * 2.0) - move_amount;\n\n                html_element\n                    .style()\n                    .set_property(\n                        \"transform\",\n                        &format!(\"translate({}px, {}px)\", x_move, y_move),\n                    )\n                    .unwrap();\n\n                if e.type_() == \"mouseleave\" {\n                    html_element.style().set_property(\"transform\", \"\").unwrap();\n                }\n            }) as Box<dyn FnMut(_)>);\n\n            link.add_event_listener_with_callback(\"mousemove\", closure.as_ref().unchecked_ref())\n                .unwrap();\n            link.add_event_listener_with_callback(\"mouseleave\", closure.as_ref().unchecked_ref())\n                .unwrap();\n            closure.forget();\n        }\n\n        let closure = Closure::wrap(Box::new(move |e: web_sys::MouseEvent| {\n            let x = e.client_x();\n            let y = e.client_y();\n            let cursor_html_element = cursor_clone.dyn_ref::<HtmlElement>().unwrap();\n            cursor_html_element\n                .style()\n                .set_property(\"left\", &format!(\"{}px\", x))\n                .unwrap();\n            cursor_html_element\n                .style()\n                .set_property(\"top\", &format!(\"{}px\", y))\n                .unwrap();\n        }) as Box<dyn FnMut(_)>);\n\n        window()\n            .unwrap()\n            .add_event_listener_with_callback(\"mousemove\", closure.as_ref().unchecked_ref())\n            .unwrap();\n        closure.forget();\n    });\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn StickyLinksNav(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    provide_sticky_cursor_links_context();\n\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"flex flex-col justify-around  mx-auto w-full text-center  lg:flex-row group cursor-none\",\n            class()\n        )\n    });\n\n    view! {\n        <nav {..attributes} class=class>\n            {children()}\n\n            <StickyCursor />\n        </nav>\n    }\n}\n\n#[component]\npub fn StickyLink(text: &'static str) -> impl IntoView {\n    view! {\n        <a href=\"#\" class=\"link\">\n            <span class=\"inline-block my-2 text-3xl font-bold text-white uppercase\">{text}</span>\n        </a>\n    }\n}\n\n#[component]\nfn StickyCursor() -> impl IntoView {\n    view! {\n        <div class=\"hidden fixed bg-white rounded-full transition-transform duration-300 ease-linear pointer-events-none group-hover:block mix-blend-difference p-[0.3rem] cursor\" />\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}