{
  "name": "demo_use_storage",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_storage.rs",
      "content": "use codee::string::JsonSerdeCodec;\nuse leptos::*;\nuse leptos_use::docs::Note;\nuse leptos_use::storage::use_local_storage;\nuse serde::{Deserialize, Serialize};\n\nuse crate::registry::ui::{button::Button, input::Input};\n\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]\npub struct BananaState {\n    pub name: String,\n    pub wearing: String,\n    pub descending: String,\n    pub count: u32,\n}\n\nimpl Default for BananaState {\n    fn default() -> Self {\n        Self {\n            name: \"Bananas\".to_string(),\n            wearing: \"pyjamas\".to_string(),\n            descending: \"stairs\".to_string(),\n            count: 2,\n        }\n    }\n}\n\n// TODO UI. Inputs for all the fields.\n\n#[component]\npub fn DemoUseStorage() -> impl IntoView {\n    let (state, set_state, reset) =\n        use_local_storage::<BananaState, JsonSerdeCodec>(\"banana-state\");\n    let (state2, _, _) = use_local_storage::<BananaState, JsonSerdeCodec>(\"banana-state\");\n\n    let name_signal = create_signal(state.get().name.clone());\n    let wearing_signal = create_signal(state.get().wearing.clone());\n    let descending_signal = create_signal(state.get().descending.clone());\n    let count_signal = create_signal(state.get().count.to_string());\n\n    view! {\n        <div class=\"flex flex-col gap-2\">\n            <Input\n                class=\"block\"\n                r#type=\"text\"\n                value=Some(name_signal.0)\n                on:input=move |e| set_state.update(|s| s.name = event_target_value(&e))\n            />\n            <Input\n                class=\"block\"\n                r#type=\"text\"\n                value=Some(wearing_signal.0)\n                on:input=move |e| set_state.update(|s| s.wearing = event_target_value(&e))\n            />\n            <Input\n                class=\"block\"\n                r#type=\"text\"\n                value=Some(descending_signal.0)\n                on:input=move |e| set_state.update(|s| s.descending = event_target_value(&e))\n            />\n            <Input\n                class=\"block\"\n                r#type=\"number\"\n                value=Some(count_signal.0)\n                on:input=move |e| {\n                    set_state\n                        .update(|s| s.count = event_target_value(&e).parse::<f64>().unwrap() as u32)\n                }\n                min=\"0\".to_string()\n                step=\"1\".to_string()\n                max=\"1000\".to_string()\n            />\n            <Button on:click=move |_| reset()>\"Delete from storage\"</Button>\n\n            <p>\n                \"Second \" <b>\n                    <code>\"use_storage\"</code>\n                </b> \":\"\n            </p>\n\n            <pre>{move || format!(\"{:#?}\", state2.get())}</pre>\n\n            <Note>\n                \"The values are persistent. When you reload the page or \"\n                <a href=\"#\" target=\"_blank\">\n                    \"open a second window\"\n                </a> \", the values will be the same.\"\n            </Note>\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}