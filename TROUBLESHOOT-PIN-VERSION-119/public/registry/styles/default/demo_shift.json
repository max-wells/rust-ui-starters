{
  "name": "demo_shift",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_shift.rs",
      "content": "use floating_ui_leptos::{\n    Boundary, DetectOverflowOptions, MiddlewareVec, Offset, OffsetOptions, Padding,\n    PartialSideObject, Placement, RootBoundary, Shift, ShiftOptions,\n};\nuse leptos::{html::Div, *};\n\nuse crate::{\n    registry::floating_ui::{\n        chrome::{Chrome, Scrollable},\n        floating::Floating,\n        grid_item::GridItem,\n        reference::Reference,\n    },\n    utils::rem_to_px::rem_to_px,\n};\n\n#[component]\npub fn DemoShift() -> impl IntoView {\n    let boundary_ref: NodeRef<Div> = NodeRef::new();\n\n    Effect::new(move |_| {\n        if let Some(boundary) = boundary_ref.get() {\n            boundary\n                .first_element_child()\n                .expect(\"First element child should exist.\")\n                .set_scroll_top(rem_to_px(200.0 / 16.0) as i32);\n        }\n    });\n\n    view! {\n        <GridItem\n            title=\"Shift\"\n            description=\"Shifts your floating element to keep it in view.\"\n            chrome=move || {\n                view! {\n                    <div ref=boundary_ref class=\"overflow-hidden relative\">\n                        <Chrome\n                            label=\"Scroll the container\"\n                            scrollable=Scrollable::Y\n                            relative=false\n                            shadow=false\n                        >\n                            <Floating\n                                placement=Placement::Right\n                                middleware=MaybeProp::derive(move || {\n                                    let mut detect_overflow_options = DetectOverflowOptions::default()\n                                        .root_boundary(RootBoundary::Document)\n                                        .padding(\n                                            Padding::PerSide(PartialSideObject {\n                                                top: Some(rem_to_px(54.0 / 16.0)),\n                                                right: None,\n                                                bottom: Some(rem_to_px(5.0 / 16.0)),\n                                                left: None,\n                                            }),\n                                        );\n                                    if let Some(boundary) = boundary_ref.get() {\n                                        let boundary: &web_sys::Element = &boundary;\n                                        detect_overflow_options = detect_overflow_options\n                                            .boundary(Boundary::Element(boundary.clone()));\n                                    }\n                                    let middleware: MiddlewareVec = vec![\n                                        Box::new(Offset::new(OffsetOptions::Value(5.0))),\n                                        Box::new(\n                                            Shift::new(\n                                                ShiftOptions::default()\n                                                    .detect_overflow(detect_overflow_options),\n                                            ),\n                                        ),\n                                    ];\n                                    Some(middleware)\n                                })\n                                content=move || {\n                                    view! {\n                                        <div class=\"grid place-items-center w-20 h-48 text-sm font-bold\">\n                                            Popover\n                                        </div>\n                                    }\n                                }\n                                reference=move |node_ref| {\n                                    view! {\n                                        <Reference node_ref=node_ref class=\"ml-[5%] sm:ml-[33%]\" />\n                                    }\n                                }\n                            />\n                        </Chrome>\n                    </div>\n                }\n            }\n        />\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_ui"
}