{
  "name": "card_wobble",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "card_wobble.rs",
      "content": "use leptos::*;\nuse std::cell::RefCell;\nuse std::rc::Rc;\nuse tailwind_fuse::*;\nuse wasm_bindgen::{prelude::Closure, JsCast};\nuse web_sys::{window, HtmlElement};\n\n#[derive(Clone)]\nstruct CardWobbleContext;\n\npub fn provide_card_wobble_context() {\n    provide_context(CardWobbleContext);\n\n    create_effect(move |_| {\n        let document = window().unwrap().document().unwrap();\n\n        if let Some(slide) = document.get_element_by_id(\"example\") {\n            let slide_clone = Rc::new(RefCell::new(slide.unchecked_into::<HtmlElement>()));\n\n            let slide_clone_for_mousemove = Rc::clone(&slide_clone);\n            let closure_mousemove = Closure::wrap(Box::new(move |e: web_sys::MouseEvent| {\n                let slide = slide_clone_for_mousemove.borrow();\n                let rect = slide.get_bounding_client_rect();\n                let x = e.client_x() as f64 - (rect.left() + rect.width() / 2.0);\n                let y = e.client_y() as f64 - (rect.top() + rect.height() / 2.0);\n                slide\n                    .style()\n                    .set_property(\"--x\", &format!(\"{}px\", x))\n                    .unwrap();\n                slide\n                    .style()\n                    .set_property(\"--y\", &format!(\"{}px\", y))\n                    .unwrap();\n\n                // TODO. Debug\n                web_sys::console::log_2(&\"Mousemove: --x:\".into(), &x.into());\n                web_sys::console::log_2(&\"Mousemove: --y:\".into(), &y.into());\n            }) as Box<dyn FnMut(_)>);\n\n            slide_clone\n                .borrow()\n                .add_event_listener_with_callback(\n                    \"mousemove\",\n                    closure_mousemove.as_ref().unchecked_ref(),\n                )\n                .unwrap();\n            closure_mousemove.forget();\n\n            let slide_clone_for_mouseleave = Rc::clone(&slide_clone);\n            let closure_mouseleave = Closure::wrap(Box::new(move || {\n                let slide = slide_clone_for_mouseleave.borrow();\n                slide.style().set_property(\"--x\", \"0px\").unwrap();\n                slide.style().set_property(\"--y\", \"0px\").unwrap();\n                web_sys::console::log_1(&\"Mouseleave: --x and --y reset to 0px\".into());\n            }) as Box<dyn FnMut()>);\n\n            slide_clone\n                .borrow()\n                .add_event_listener_with_callback(\n                    \"mouseleave\",\n                    closure_mouseleave.as_ref().unchecked_ref(),\n                )\n                .unwrap();\n            closure_mouseleave.forget();\n        } else {\n            web_sys::console::error_1(&\"Element with ID 'example' not found.\".into());\n        }\n    });\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn CardWobble(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"relative flex flex-col items-center justify-center text-center text-white slide\",\n            class()\n        )\n    });\n\n    view! {\n        <div {..attributes} class=class id=\"example\">\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn CardWobbleImageWrapper(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"slide__image-wrapper\",\n            \"overflow-hidden absolute h-full left-[0%] top-[0%] rounded-[1%]\",\n            class()\n        )\n    });\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn CardWobbleImage(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(into)] src: String,\n    #[prop(into)] alt: MaybeSignal<String>,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\"slide__image\", \"object-cover absolute pointer-events-none select-none w-[110%] h-[110%] left-[-5%] top-[-5%]\", class())\n    });\n\n    view! { <img {..attributes} class=class src=src alt=alt /> }\n}\n\n#[component]\npub fn CardWobbleContent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"slide__content\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}