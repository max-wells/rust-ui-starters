{
  "name": "demo_dropdown_todo_v0",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_dropdown_todo_v0.rs",
      "content": "use ev::MouseEvent;\nuse leptos::*;\n\n#[component]\npub fn DemoDropdownV0() -> impl IntoView {\n    let (is_open, set_is_open) = create_signal(false);\n\n    let toggle_dropdown = move |_| set_is_open.update(|v| *v = !*v);\n\n    let handle_item_click = move |item: &str| {\n        set_is_open.set(false);\n        // You can add any common logic here\n        println!(\"Clicked item: {}\", item);\n    };\n\n    view! {\n        <div class=\"relative\">\n            <button\n                on:click=toggle_dropdown\n                class=\"flex items-center py-2.5 px-6 text-xs font-medium leading-normal text-white uppercase whitespace-nowrap bg-blue-500 rounded shadow-md transition duration-150 ease-in-out hover:bg-blue-600 hover:shadow-lg focus:bg-blue-600 focus:ring-0 focus:shadow-lg focus:outline-none active:bg-blue-700 active:shadow-lg\"\n            >\n                \"Dropdown button\"\n                <span class=\"ml-2\">\n                    <DropdownCaret />\n                </span>\n            </button>\n            <ul class=move || {\n                format!(\n                    \"absolute z-10 float-left mt-1 {} min-w-max list-none overflow-hidden rounded-lg border-none bg-white bg-clip-padding text-left text-base shadow-lg\",\n                    if is_open() { \"\" } else { \"hidden\" },\n                )\n            }>\n                <DropdownItem\n                    text=\"Action 1\"\n                    on_click=Callback::from(move |_| handle_item_click(\"Action 1\"))\n                />\n                <DropdownItem\n                    text=\"Action 2\"\n                    on_click=Callback::from(move |_| handle_item_click(\"Action 2\"))\n                />\n                <DropdownItem\n                    text=\"Action 3\"\n                    on_click=Callback::from(move |_| handle_item_click(\"Action 3\"))\n                />\n            </ul>\n        </div>\n    }\n}\n\n#[component]\nfn DropdownItem(text: &'static str, on_click: Callback<MouseEvent>) -> impl IntoView {\n    view! {\n        <li>\n            <button\n                class=\"block py-2 px-4 w-full text-sm font-normal text-left text-gray-700 whitespace-nowrap bg-transparent transition duration-150 ease-in-out hover:bg-gray-100\"\n                on:click=on_click\n            >\n                {text}\n            </button>\n        </li>\n    }\n}\n\n#[component]\nfn DropdownCaret() -> impl IntoView {\n    view! {\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n            class=\"w-5 h-5\"\n        >\n            <path\n                fill-rule=\"evenodd\"\n                d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z\"\n                clip-rule=\"evenodd\"\n            />\n        </svg>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_ui"
}