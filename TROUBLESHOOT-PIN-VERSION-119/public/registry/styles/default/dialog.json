{
  "name": "dialog",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "dialog.rs",
      "content": "use leptos::html::Dialog;\nuse leptos::*;\nuse tailwind_fuse::*;\nuse wasm_bindgen::JsCast;\nuse web_sys::HtmlElement;\n\nuse crate::registry::ui::{\n    _shared::STYLES,\n    button::{Button, ButtonVariant},\n};\n\n#[derive(Clone)]\npub struct DialogContext {\n    pub dialog_ref: NodeRef<Dialog>,\n}\n\npub fn use_dialog_context() -> DialogContext {\n    use_context::<DialogContext>().expect(\"DialogContext not found\")\n}\n\n#[allow(unused_braces)]\n#[component]\npub fn DialogProvider(children: Children) -> impl IntoView {\n    let dialog_ref = create_node_ref::<Dialog>();\n\n    provide_context(DialogContext {\n        dialog_ref,\n    });\n\n    view! { {children()} }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn DialogComponent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    children: Children,\n) -> impl IntoView {\n    let dialog_context = use_dialog_context();\n    let dialog_ref = dialog_context.dialog_ref;\n\n    let class = tw_merge!(\n        STYLES.DIALOG_BACKDROP,\n        STYLES.DIALOG_OPEN_STATE,\n        STYLES.DIALOG_OPACITY_TRANSITION,\n        STYLES.BLOCK_INSET_ZERO,\n        \"duration-300 translate-y-20\",\n        \"p-0 w-2/3 rounded-2xl text-md\",\n        \"text-primary\",\n        // \"mx-auto\", // TODO Does not fix issue for triggering from Navbar...\n        class()\n    );\n\n    let close_dialog = move |_| {\n        if let Some(dialog) = dialog_ref.get() {\n            dialog.close();\n        }\n    };\n\n    view! {\n        <dialog\n            _ref=dialog_ref\n            on:click=move |ev| {\n                let target = ev.target().unwrap();\n                if let Some(element) = target.dyn_ref::<HtmlElement>() {\n                    if element.tag_name() == \"DIALOG\" {\n                        if let Some(dialog) = dialog_ref.get() {\n                            dialog.close();\n                        }\n                    }\n                }\n            }\n            on:close=move |ev| {\n                #[allow(unused_variables)]\n                let _target = ev.target().unwrap();\n            }\n            class=class\n        >\n            <div class=\"relative\">\n                <button\n                    type=\"button\"\n                    on:click=close_dialog\n                    class=\"flex absolute top-4 right-4 justify-center items-center p-3 text-xl bg-gray-100 rounded-md size-8\"\n                >\n                    <span class=\"sr-only\">\"close\"</span>\n                    \"X\"\n                </button>\n                {children()}\n            </div>\n        </dialog>\n    }\n}\n\n#[component]\npub fn DialogTrigger(children: Children) -> impl IntoView {\n    let dialog_context = use_dialog_context();\n    let dialog_ref = dialog_context.dialog_ref;\n\n    let show_dialog = move |_| {\n        if let Some(dialog) = dialog_ref.get() {\n            dialog.show_modal().unwrap();\n        }\n    };\n\n    view! {\n        <Button on:click=show_dialog variant=ButtonVariant::Outline>\n            {children()}\n        </Button>\n    }\n}\n\n//\n#[component]\npub fn DialogForm(children: Children) -> impl IntoView {\n    view! { <form method=\"dialog\">{children()}</form> }\n}\n\n#[component]\npub fn DialogContent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"py-16 px-8 space-y-3 bg-background shadow-lg border\",\n            class()\n        )\n    });\n\n    view! {\n        <main {..attributes} class=class>\n            {children()}\n        </main>\n    }\n}\n\n#[component]\npub fn DialogTitle(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"text-2xl font-bold\", class()));\n\n    view! {\n        <h2 {..attributes} class=class>\n            {children()}\n        </h2>\n    }\n}\n\n#[component]\npub fn DialogBody(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn DialogFooter(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"flex gap-6 justify-end py-4 px-8\", class()));\n\n    view! {\n        <footer {..attributes} class=class>\n            {children()}\n        </footer>\n    }\n}\n\n#[component]\npub fn DialogButtonFormCancel(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button\n            {..attributes}\n            class=class\n            variant=ButtonVariant::Outline\n            formmethod=\"dialog\"\n            value=\"cancel\"\n        >\n            {children()}\n        </Button>\n    }\n}\n\n#[component]\npub fn DialogButtonFormSubmit(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button {..attributes} class=class formmethod=\"dialog\" value=\"submit\">\n            {children()}\n        </Button>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}