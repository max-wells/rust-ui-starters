{
  "name": "alert_dialog",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "alert_dialog.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\nuse crate::registry::ui::{\n    _shared::STYLES,\n    button::{Button, ButtonVariant},\n};\n\npub type AlertDialogVariant = ButtonVariant;\n\nconst POPOVER_ID_TARGET: &str = \"mypopover\";\n\n#[component]\npub fn AlertDialogComponent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class =\n        create_memo(move |_| tw_merge!(\"p-6 max-w-[500px] rounded-lg border-none\", class()));\n\n    view! {\n        <div class=\"\">\n            <dialog\n                {..attributes}\n                class=class\n                id=POPOVER_ID_TARGET\n                // * 💁 💡 Manual mode means can't close the popover by clicking outside of it.\n                // * ---> It needs the popovertargetaction=\"hide\" (or \"submit\") to be clicked.\n                popover=\"manual\"\n            >\n                {children()}\n            </dialog>\n        </div>\n    }\n}\n\n#[component]\npub fn AlertDialogTrigger(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into, optional)] variant: MaybeSignal<ButtonVariant>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button {..attributes} class=class popovertarget=POPOVER_ID_TARGET variant=variant>\n            {children()}\n        </Button>\n    }\n}\n\n#[component]\npub fn AlertDialogTitle(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"text-lg font-semibold\", class()));\n\n    view! {\n        <h2 {..attributes} class=class>\n            {children()}\n        </h2>\n    }\n}\n\n#[component]\npub fn AlertDialogDescription(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"text-sm\", STYLES.TEXT_MUTED_FOREGROUND, class()));\n\n    view! {\n        <p {..attributes} class=class>\n            {children()}\n        </p>\n    }\n}\n\n#[component]\npub fn AlertDialogFooter(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"flex justify-end gap-2\", class()));\n\n    view! {\n        <footer {..attributes} class=class>\n            {children()}\n        </footer>\n    }\n}\n\n#[component]\npub fn AlertDialogCancel(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(optional, default = AlertDialogVariant::Outline)] variant: AlertDialogVariant,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button\n            {..attributes}\n            class=class\n            variant=variant\n            popovertarget=POPOVER_ID_TARGET\n            popovertargetaction=\"hide\"\n        >\n            {children()}\n        </Button>\n    }\n}\n\n#[component]\npub fn AlertDialogSubmit(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button\n            {..attributes}\n            class=class\n            popovertarget=POPOVER_ID_TARGET\n            popovertargetaction=\"submit\"\n        >\n            {children()}\n        </Button>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}