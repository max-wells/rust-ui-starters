{
  "name": "demo_headings_motion",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_headings_motion.rs",
      "content": "use leptos::*;\n\nuse crate::registry::ui::{\n    animate::{Animate, AnimateVariant},\n    button::Button,\n    headings::H1,\n};\n\n#[component]\npub fn DemoHeadingsMotion() -> impl IntoView {\n    // Create a state variable to trigger rerender\n    let (rerender_key, set_rerender_key) = create_signal(0);\n\n    view! {\n        <div class=\"flex flex-col gap-2\">\n            // Use the state variable to force remount\n            <Animate\n                variant=AnimateVariant::FadeUp\n                style=\"animation-delay: 0.25s; animation-fill-mode: forwards;\"\n            >\n                // Use key to force remount\n                // Set key to the current value of rerender_key\n                <H1 key=rerender_key\n                    .get()>{move || format!(\"This is a Motion Heading {}\", rerender_key.get())}</H1>\n            </Animate>\n            // Display the number of renders\n            <p>{move || format!(\"Render count: {}\", rerender_key.get())}</p>\n            // Button to update the state variable and force remount\n            <Button on:click=move |_| {\n                set_rerender_key.set(rerender_key.get() + 1);\n                log::info!(\"Rerender key updated to: {}\", rerender_key.get());\n            }>\"Rerender Heading\"</Button>\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_core",
  "type_short": "components:demos"
}