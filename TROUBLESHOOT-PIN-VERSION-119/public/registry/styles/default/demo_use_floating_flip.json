{
  "name": "demo_use_floating_flip",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_floating_flip.rs",
      "content": "use floating_ui_leptos::{\n    DetectOverflowOptions, Flip, FlipOptions, MiddlewareVec, Offset, OffsetOptions, Placement,\n    RootBoundary,\n};\nuse leptos::{html::Div, *};\n\nuse crate::{\n    registry::floating_ui::{\n        chrome::{Chrome, Scrollable},\n        floating::Floating,\n        grid_item::GridItem,\n        reference::Reference,\n    },\n    utils::rem_to_px::rem_to_px,\n};\n\n#[component]\npub fn DemoUseFloatingFlip() -> impl IntoView {\n    let boundary_ref: NodeRef<Div> = NodeRef::new();\n\n    Effect::new(move |_| {\n        if let Some(boundary) = boundary_ref.get() {\n            boundary\n                .first_element_child()\n                .expect(\"First element child should exist.\")\n                .set_scroll_top(rem_to_px(275.0 / 16.0) as i32);\n        }\n    });\n\n    view! {\n        <GridItem\n            title=\"Flip\"\n            description=\"Changes the placement of your floating element to keep it in view.\"\n            chrome=move || {\n                view! {\n                    <div ref=boundary_ref class=\"overflow-hidden relative\">\n                        <Chrome\n                            label=\"Scroll down\"\n                            scrollable=Scrollable::Y\n                            center=true\n                            shadow=false\n                        >\n                            <Floating\n                                placement=Placement::Top\n                                middleware={\n                                    let middleware: MiddlewareVec = vec![\n                                        Box::new(Offset::new(OffsetOptions::Value(5.0))),\n                                        Box::new(\n                                            Flip::new(\n                                                FlipOptions::default()\n                                                    .detect_overflow(\n                                                        DetectOverflowOptions::default()\n                                                            .root_boundary(RootBoundary::Document),\n                                                    ),\n                                            ),\n                                        ),\n                                    ];\n                                    middleware\n                                }\n                                content=move || {\n                                    view! { <span class=\"text-sm font-bold\">Tooltip</span> }\n                                }\n                                reference=move |node_ref| view! { <Reference node_ref=node_ref /> }\n                            />\n                        </Chrome>\n                    </div>\n                }\n            }\n        />\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}