{
  "name": "table",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "table.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn Table(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"w-full max-w-7xl text-sm caption-bottom\", class()));\n\n    view! {\n        <table {..attributes} class=class>\n            {children()}\n        </table>\n    }\n}\n\n#[component]\npub fn TableCaption(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"mt-4 text-sm text-muted-foreground\", class()));\n\n    view! {\n        <caption {..attributes} class=class>\n            {children()}\n        </caption>\n    }\n}\n\n#[component]\npub fn TableHeader(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"[&amp;_tr]:border-b\", class()));\n\n    view! {\n        <thead {..attributes} class=class>\n            {children()}\n        </thead>\n    }\n}\n\n#[component]\npub fn TableRow(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"border border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50\",\n            class()\n        )\n    });\n\n    view! {\n        <tr {..attributes} class=class>\n            {children()}\n        </tr>\n    }\n}\n\n#[component]\npub fn TableHead(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"px-4 h-12 font-medium text-left align-middle text-muted-foreground [&amp;:has([role=checkbox])]:pr-0\",\n            class()\n        )\n    });\n\n    view! {\n        <th {..attributes} class=class>\n            {children()}\n        </th>\n    }\n}\n\n#[component]\npub fn TableBody(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <tbody {..attributes} class=class>\n            {children()}\n        </tbody>\n    }\n}\n\n#[component]\npub fn TableCell(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"p-4 align-middle [&amp;:has([role=checkbox])]:pr-0\",\n            class()\n        )\n    });\n\n    view! {\n        <td {..attributes} class=class>\n            {children()}\n        </td>\n    }\n}\n\n#[component]\npub fn TableFooter(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"font-medium border border-t bg-muted/50 [&amp;&gt;tr]:last:border-b-0\",\n            class()\n        )\n    });\n\n    view! {\n        <tfoot {..attributes} class=class>\n            {children()}\n        </tfoot>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}