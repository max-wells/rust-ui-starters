{
  "name": "demo_use_floating_tooltip",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_floating_tooltip.rs",
      "content": "use floating_ui_leptos::{\n    use_floating, Arrow, ArrowData, ArrowOptions, DetectOverflowOptions, Flip, FlipOptions,\n    IntoReference, MiddlewareVec, Offset, OffsetOptions, Padding, Placement, Shift, ShiftOptions,\n    Side, UseFloatingOptions, UseFloatingReturn, ARROW_NAME,\n};\nuse leptos::{\n    html::{Button, Div},\n    *,\n};\n\n#[component]\npub fn DemoUseFloatingTooltip() -> impl IntoView {\n    let reference_ref = create_node_ref::<Button>();\n    let floating_ref = create_node_ref::<Div>();\n    let arrow_ref = create_node_ref::<Div>();\n\n    let (open, set_open) = create_signal(false);\n\n    let middleware: MiddlewareVec = vec![\n        Box::new(Offset::new(OffsetOptions::Value(6.0))),\n        Box::new(Flip::new(FlipOptions::default())),\n        Box::new(Shift::new(ShiftOptions::default().detect_overflow(\n            DetectOverflowOptions::default().padding(Padding::All(5.0)),\n        ))),\n        Box::new(Arrow::new(ArrowOptions::new(arrow_ref))),\n    ];\n\n    let UseFloatingReturn {\n        placement,\n        floating_styles,\n        middleware_data,\n        ..\n    } = use_floating(\n        reference_ref.into_reference(),\n        floating_ref,\n        UseFloatingOptions::default()\n            .open(open.into())\n            .placement(Placement::Top.into())\n            .middleware(middleware.into())\n            .while_elements_mounted_auto_update(),\n    );\n\n    let static_side = move || placement().side().opposite();\n    let arrow_data = move || -> Option<ArrowData> { middleware_data().get_as(ARROW_NAME) };\n    let arrow_x =\n        move || arrow_data().and_then(|arrow_data| arrow_data.x.map(|x| format!(\"{}px\", x)));\n    let arrow_y =\n        move || arrow_data().and_then(|arrow_data| arrow_data.y.map(|y| format!(\"{}px\", y)));\n\n    view! {\n        <button\n            _ref=reference_ref\n            id=\"button\"\n            class=\"p-2 text-white bg-blue-500 rounded-md\"\n            aria-describedby=\"tooltip\"\n            on:mouseenter=move |_| set_open(true)\n            on:mouseleave=move |_| set_open(false)\n            on:focus=move |_| set_open(true)\n            on:blur=move |_| set_open(false)\n        >\n            My button\n        </button>\n\n        <div\n            _ref=floating_ref\n            class=\"p-2 text-white bg-blue-500 rounded-md\"\n            id=\"tooltip\"\n            role=\"tooltip\"\n            style:display=move || match open() {\n                true => \"block\",\n                false => \"none\",\n            }\n            style:position=move || floating_styles().style_position()\n            style:top=move || floating_styles().style_top()\n            style:left=move || floating_styles().style_left()\n            style:transform=move || floating_styles().style_transform()\n            style:will-change=move || floating_styles().style_will_change()\n        >\n            \"My tooltip with more content\"\n            <div\n                _ref=arrow_ref\n                id=\"arrow\"\n                style:left=move || match static_side() {\n                    Side::Left => Some(\"-4px\".into()),\n                    _ => arrow_x(),\n                }\n                style:top=move || match static_side() {\n                    Side::Top => Some(\"-4px\".into()),\n                    _ => arrow_y(),\n                }\n                style:right=move || match static_side() {\n                    Side::Right => Some(\"-4px\"),\n                    _ => None,\n                }\n                style:bottom=move || match static_side() {\n                    Side::Bottom => Some(\"-4px\"),\n                    _ => None,\n                }\n            />\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}