{
  "name": "faq",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "faq.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n// TODO UI. FaqProvider for FaqSections\n#[component]\npub fn Faq(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class =\n        create_memo(move |_| tw_merge!(\"flex flex-col gap-3 w-full max-w-screen-md\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn FaqSection(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class =\n        create_memo(move |_| tw_merge!(\"w-full rounded bg-accent/30 hover:bg-accent\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            <div class=\"flex flex-col\">{children()}</div>\n        </div>\n    }\n}\n\n#[component]\npub fn FaqContent(children: Children) -> impl IntoView {\n    view! {\n        <div class=\"grid overflow-hidden mt-2 transition-all duration-500 grid-rows-[0fr] peer-checked:grid-rows-[1fr]\">\n            <div class=\"px-4 min-h-[0]\">{children()}</div>\n        </div>\n    }\n}\n\n#[component]\npub fn FaqTitle(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"text-lg text-primary\", class()));\n\n    view! {\n        <span {..attributes} class=class>\n            {children()}\n        </span>\n    }\n}\n\n#[component]\npub fn FaqDescription(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"pr-6 mb-2 text-muted-foreground\", class()));\n\n    view! {\n        <p {..attributes} class=class>\n            {children()}\n        </p>\n    }\n}\n\n#[component]\npub fn FaqLabel(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(into)] for_attr: &'static str,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"flex justify-between items-center py-2 px-4 mt-2 w-full cursor-pointer\",\n            class()\n        )\n    });\n\n    view! {\n        <label {..attributes} class=class for=for_attr>\n            {children()}\n        </label>\n    }\n}\n\n#[component]\npub fn FaqInput(\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(into)] id: &'static str,\n) -> impl IntoView {\n    view! { <input {..attributes} id=id type=\"checkbox\" class=\"ml-auto sr-only peer\" /> }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}