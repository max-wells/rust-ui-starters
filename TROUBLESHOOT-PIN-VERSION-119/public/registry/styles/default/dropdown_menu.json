{
  "name": "dropdown_menu",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "dropdown_menu.rs",
      "content": "use ev::MouseEvent;\nuse html::Div;\nuse leptos::*;\nuse tailwind_fuse::*;\n\nuse crate::registry::ui::button::{Button, ButtonVariant};\n\n// TODO. Change bg-white.\n\n#[allow(unused_variables)]\n#[component]\npub fn DropdownMenu(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n    #[prop(optional)] node_ref: NodeRef<Div>,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"relative inline-block text-left\", class()));\n\n    view! {\n        <div {..attributes} class=class node_ref=node_ref>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn DropdownMenuTrigger(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"size-10 p-0\", class()));\n\n    view! {\n        <Button variant=ButtonVariant::Outline class=class id=\"theme-menu\">\n            // aria-haspopup=\"true\"\n            // aria-expanded=move || aria_expanded.get().to_string()\n            {children()}\n        </Button>\n    }\n}\n\n#[component]\npub fn DropdownMenuContent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into)] is_open: MaybeSignal<bool>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none\",\n            class()\n        )\n    });\n\n    view! {\n        <div\n            class=class\n            class:hidden=move || !is_open.get()\n            role=\"menu\"\n            aria-orientation=\"vertical\"\n            aria-labelledby=\"theme-menu\"\n        >\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn DropdownMenuItem(\n    #[prop(into, optional)] on_click: Option<Callback<MouseEvent>>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"flex items-center w-full px-4 py-2 text-sm text-gray-700 group hover:bg-gray-100 hover:text-gray-900\",\n            class()\n        )\n    });\n\n    let on_click = on_click.unwrap_or_else(|| Callback::from(|_| {}));\n\n    view! {\n        <button class=class role=\"menuitem\" on:click=on_click>\n            {children()}\n        </button>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}