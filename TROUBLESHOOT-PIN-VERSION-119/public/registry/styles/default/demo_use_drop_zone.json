{
  "name": "demo_use_drop_zone",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_drop_zone.rs",
      "content": "use leptos::*;\n\n#[cfg(feature = \"hydrate\")]\nuse leptos::html::Div;\n#[cfg(feature = \"hydrate\")]\nuse leptos_use::docs::BooleanDisplay;\n#[cfg(feature = \"hydrate\")]\nuse leptos_use::{use_drop_zone_with_options, UseDropZoneOptions, UseDropZoneReturn};\n\n#[component]\npub fn DemoUseDropZone() -> impl IntoView {\n    #[cfg(feature = \"hydrate\")]\n    let drop_zone_component = {\n        let (dropped, set_dropped) = create_signal(false);\n\n        let drop_zone_el = create_node_ref::<Div>();\n\n        let UseDropZoneReturn {\n            is_over_drop_zone,\n            files,\n        } = use_drop_zone_with_options(\n            drop_zone_el,\n            UseDropZoneOptions::default()\n                .on_drop(move |_| set_dropped(true))\n                .on_enter(move |_| set_dropped(false)),\n        );\n\n        view! {\n            <div class=\"flex\">\n                <div class=\"relative w-full h-auto\">\n                    <p>Drop files into dropZone</p>\n                    <img\n                        width=\"64\"\n                        src=\"use_drop_zone/demo/img/leptos-use-logo.svg\"\n                        alt=\"Drop me\"\n                    />\n                    <div\n                        node_ref=drop_zone_el\n                        class=\"flex flex-col justify-center items-center pt-6 w-full h-auto min-h-[200px] bg-gray-400/10\"\n                    >\n                        <div>is_over_drop_zone: <BooleanDisplay value=is_over_drop_zone /></div>\n                        <div>dropped: <BooleanDisplay value=dropped /></div>\n                        <div class=\"flex flex-wrap justify-center items-center\">\n                            <For each=files key=|f| f.name() let:file>\n                                <div class=\"w-200px bg-black-200/10 ma-2 pa-6\">\n                                    <p>Name: {file.name()}</p>\n                                    <p>Size: {file.size()}</p>\n                                    <p>Type: {file.type_()}</p>\n                                    <p>Last modified: {file.last_modified()}</p>\n                                </div>\n                            </For>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n    };\n\n    #[cfg(not(feature = \"hydrate\"))]\n    let drop_zone_component = view! {\n        <p>\n            \"Drop zone functionality is not available on the server. This component requires client-side hydration.\"\n        </p>\n    };\n\n    view! { <div>{drop_zone_component}</div> }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}