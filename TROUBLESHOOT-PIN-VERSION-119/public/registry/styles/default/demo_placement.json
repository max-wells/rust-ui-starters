{
  "name": "demo_placement",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_placement.rs",
      "content": "use convert_case::{Case, Casing};\nuse floating_ui_leptos::{MiddlewareVec, Offset, OffsetOptions, Placement};\nuse leptos::*;\nuse tailwind_fuse::tw_merge;\n\nuse crate::registry::floating_ui::{\n    chrome::Chrome, floating::Floating, grid_item::GridItem, reference::Reference,\n};\n\nstruct PlacementData {\n    placement: Placement,\n    top: Option<String>,\n    right: Option<String>,\n    bottom: Option<String>,\n    left: Option<String>,\n}\n\n#[component]\npub fn DemoPlacement() -> impl IntoView {\n    let (placement, set_placement) = create_signal(Placement::Top);\n\n    view! {\n        <GridItem\n            title=\"Placement\"\n            description=\"Places your floating element relative to another element.\"\n            chrome=move || {\n                view! {\n                    <Chrome label=\"Click the dots\" center=true shadow=false>\n                        <For\n                            each=|| [\n                                PlacementData {\n                                    placement: Placement::Top,\n                                    top: Some(\"0px\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"calc(50% - 10px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::TopStart,\n                                    top: Some(\"0px\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"calc(50% - 70px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::TopEnd,\n                                    top: Some(\"0px\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"calc(50% + 50px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::Bottom,\n                                    top: None,\n                                    right: None,\n                                    bottom: Some(\"0px\".into()),\n                                    left: Some(\"calc(50% - 10px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::BottomStart,\n                                    top: None,\n                                    right: None,\n                                    bottom: Some(\"0px\".into()),\n                                    left: Some(\"calc(50% - 70px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::BottomEnd,\n                                    top: None,\n                                    right: None,\n                                    bottom: Some(\"0px\".into()),\n                                    left: Some(\"calc(50% + 50px - 1rem)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::Right,\n                                    top: Some(\"calc(50% - 10px - 1rem)\".into()),\n                                    right: Some(\"min(50px, 5%)\".into()),\n                                    bottom: None,\n                                    left: None,\n                                },\n                                PlacementData {\n                                    placement: Placement::RightStart,\n                                    top: Some(\"calc(50% - 70px - 1rem)\".into()),\n                                    right: Some(\"min(50px, 5%)\".into()),\n                                    bottom: None,\n                                    left: None,\n                                },\n                                PlacementData {\n                                    placement: Placement::RightEnd,\n                                    top: Some(\"calc(50% + 50px - 1rem)\".into()),\n                                    right: Some(\"min(50px, 5%)\".into()),\n                                    bottom: None,\n                                    left: None,\n                                },\n                                PlacementData {\n                                    placement: Placement::Left,\n                                    top: Some(\"calc(50% - 10px - 1rem)\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"min(50px, 5%)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::LeftStart,\n                                    top: Some(\"calc(50% - 70px - 1rem)\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"min(50px, 5%)\".into()),\n                                },\n                                PlacementData {\n                                    placement: Placement::LeftEnd,\n                                    top: Some(\"calc(50% + 50px - 1rem)\".into()),\n                                    right: None,\n                                    bottom: None,\n                                    left: Some(\"min(50px, 5%)\".into()),\n                                },\n                            ]\n                            key=|data| format!(\"{:?}\", data.placement).to_case(Case::Kebab)\n                            children=move |data| {\n                                view! {\n                                    <button\n                                        class=\"absolute p-4 transition hover:scale-125\"\n                                        aria-label=format!(\"{:?}\", data.placement)\n                                            .to_case(Case::Kebab)\n                                        style:top=data.top\n                                        style:right=data.right\n                                        style:bottom=data.bottom\n                                        style:left=data.left\n                                        on:click=move |_| set_placement.set(data.placement)\n                                    >\n                                        <div class=tw_merge!(\n                                            \"h-5 w-5 rounded-full border-2 border-solid\",\n                                        match placement.get() == data.placement {\n                                            true => \"border-gray-800 bg-gray-800\",\n                                            false => \"border-gray-900\"\n                                        }\n                                        ) />\n                                    </button>\n                                }\n                            }\n                        />\n                        <Floating\n                            placement=placement\n                            middleware={\n                                let middleware: MiddlewareVec = vec![\n                                    Box::new(Offset::new(OffsetOptions::Value(5.0))),\n                                ];\n                                middleware\n                            }\n                            content=move || {\n                                view! {\n                                    <div\n                                        class=\"text-sm font-bold text-center\"\n                                        style:min-width=move || {\n                                            matches!(\n                                                placement.get(),\n                                                Placement::TopStart\n                                                | Placement::TopEnd\n                                                | Placement::BottomStart\n                                                | Placement::BottomEnd\n                                            )\n                                                .then_some(\"8rem\")\n                                        }\n                                    >\n                                        {move || {\n                                            format!(\"{:?}\", placement.get()).to_case(Case::Kebab)\n                                        }}\n                                    </div>\n                                }\n                            }\n                            reference=move |node_ref| view! { <Reference node_ref=node_ref /> }\n                        />\n                    </Chrome>\n                }\n            }\n        />\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_ui"
}