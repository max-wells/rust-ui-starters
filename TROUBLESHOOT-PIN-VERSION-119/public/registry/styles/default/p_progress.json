{
  "name": "p_progress",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "p_progress.rs",
      "content": "use leptos::{html::AnyElement, *};\n\nuse crate::registry::primitives::{p_primitive::Primitive, Attributes};\n\nconst DEFAULT_MAX: f64 = 100.0;\n\n#[derive(Clone)]\nstruct ProgressContextValue {\n    value: Signal<Option<f64>>,\n    max: Signal<f64>,\n}\n\n#[component]\npub fn PrimitiveProgressRoot(\n    #[prop(optional, into)] value: MaybeProp<f64>,\n    #[prop(default=100.0f64.into(), into)] max: MaybeSignal<f64>,\n\n    #[prop(optional)] get_value_label: Option<Callback<(f64, f64), String>>,\n\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    children: ChildrenFn,\n\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n) -> impl IntoView {\n    let max = Signal::derive(move || {\n        let max = max.get();\n\n        if !max.is_nan() && max > 0.0 {\n            max\n        } else {\n            DEFAULT_MAX\n        }\n    });\n\n    let value = Signal::derive(move || {\n        let max = max.get();\n\n        value\n            .get()\n            .and_then(|value| (!value.is_nan() && value <= max && value >= 0.0).then_some(value))\n    });\n\n    let get_value_label = get_value_label.unwrap_or(Callback::new(|(value, max): (f64, f64)| {\n        format!(\"{}%\", (value / max).round() * 100.0)\n    }));\n\n    let value_label = Signal::derive(move || {\n        value\n            .get()\n            .map(|value| leptos::Callable::call(&get_value_label, (value, max.get())))\n    });\n\n    provide_context(ProgressContextValue {\n        value,\n        max: Signal::derive(move || max.get()),\n    });\n\n    view! {\n        <Primitive\n            {..attrs}\n            attr:role=\"progressbar\"\n            attr:aria-valuemax=max\n            attr:aria-valuemin=0\n            attr:aria-valuenow=value\n            attr:aria-valuetext=value_label\n            attr:data-state=move || {\n                value\n                    .get()\n                    .map(|value| { if value == max.get() { \"complete\" } else { \"loading\" } })\n                    .unwrap_or(\"indeterminate\")\n            }\n            attr:data-value=value\n            attr:data-max=max\n            element=html::div\n            node_ref=node_ref\n            as_child=as_child\n        >\n            {children()}\n        </Primitive>\n    }\n}\n\n#[component]\npub fn PrimitiveProgressIndicator(\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    #[prop(optional)] children: Option<ChildrenFn>,\n\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n) -> impl IntoView {\n    let ProgressContextValue {\n        max,\n        value,\n    } = use_context().expect(\"ProgressIndicator needs to be in a Progress component\");\n\n    let children = StoredValue::new(children);\n\n    view! {\n        <Primitive\n            {..attrs}\n            attr:data-state=move || {\n                value\n                    .get()\n                    .map(|value| { if value == max.get() { \"complete\" } else { \"loading\" } })\n                    .unwrap_or(\"indeterminate\")\n            }\n            attr:data-value=value\n            attr:data-max=max\n            element=html::div\n            node_ref=node_ref\n            as_child=as_child\n        >\n            {children.with_value(|children| children.as_ref().map(|children| children()))}\n        </Primitive>\n    }\n}\n"
    }
  ],
  "type": "components:primitives/",
  "type_short": "components:primitives"
}