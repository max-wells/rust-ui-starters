{
  "name": "cards_glowing",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "cards_glowing.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\nuse wasm_bindgen::{prelude::Closure, JsCast};\nuse web_sys::{window, HtmlElement, MouseEvent};\n\nconst HARDCODED_CARDS_ID: &str = \"cards\";\nconst HARDCODED_CARD_CLASS: &str = \"card\";\n\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n\n#[derive(Clone)]\nstruct MouseEffectContext;\n\nfn provide_mouse_effect_context() {\n    provide_context(MouseEffectContext);\n\n    create_effect(move |_| {\n        let document = window().unwrap().document().unwrap();\n\n        if let Some(cards) = document.get_element_by_id(HARDCODED_CARDS_ID) {\n            let closure = Closure::wrap(Box::new(move |event: MouseEvent| {\n                let cards = document.get_elements_by_class_name(HARDCODED_CARD_CLASS);\n\n                for i in 0..cards.length() {\n                    if let Some(card) = cards.item(i) {\n                        let card: HtmlElement = card.dyn_into().unwrap();\n                        let rect = card.get_bounding_client_rect();\n                        let x = event.client_x() as f64 - rect.left();\n                        let y = event.client_y() as f64 - rect.top();\n\n                        card.style()\n                            .set_property(\"--mouse-x\", &format!(\"{}px\", x))\n                            .unwrap();\n                        card.style()\n                            .set_property(\"--mouse-y\", &format!(\"{}px\", y))\n                            .unwrap();\n                    }\n                }\n            }) as Box<dyn FnMut(_)>);\n\n            cards\n                .add_event_listener_with_callback(\"mousemove\", closure.as_ref().unchecked_ref())\n                .unwrap();\n            closure.forget();\n        }\n    });\n}\n\n\n\n#[component]\npub fn CardsGlowing(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    provide_mouse_effect_context();\n\n    let class = create_memo(move |_| tw_merge!(\"flex flex-wrap gap-2 max-w-[916px]\", class()));\n\n    view! {\n        <div {..attributes} class=class id=HARDCODED_CARDS_ID>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn CardGlowingItem(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            HARDCODED_CARD_CLASS, \n            \"w-[calc(50%-4px)] md:w-[300px]\",\n            \"flex relative flex-col rounded-md cursor-pointer w-[300px] h-[260px] bg-[rgba(255,255,255,0.1)]\",\n            \"before:content-[''] before:absolute before:inset-0 before:opacity-0 before:transition-opacity before:duration-500 before:h-[100%] before:w-[100%] before:left-0 before:top-0 \",\n            \"after:content-[''] after:absolute after:inset-0 after:opacity-0 after:transition-opacity after:duration-500 after:h-[100%] after:w-[100%] after:left-0 after:top-0\",\n            class()\n        )\n    });\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn CardGlowingContent(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"flex flex-col p-2 absolute\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}