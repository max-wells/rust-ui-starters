{
  "name": "demo_accordion",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_accordion.rs",
      "content": "use leptos::*;\n\nuse crate::registry::icons::chevrons::chevron_down::ChevronDown;\nuse crate::registry::primitives::p_accordion::{\n    AccordionKind, AccordionSingle, PrimitiveAccordionContent, PrimitiveAccordionHeader,\n    PrimitiveAccordionItem, PrimitiveAccordionRoot, PrimitiveAccordionTrigger,\n};\n\n#[component]\npub fn DemoAccordion() -> impl IntoView {\n    view! {\n        <PrimitiveAccordionRoot\n            attr:class=\"w-[500px]\"\n            kind=AccordionKind::Single {\n                value: AccordionSingle::none().into(),\n                default_value: \"item-1\".into(),\n                collapsible: true.into(),\n                on_value_change: None,\n            }\n        >\n            // kind=AccordionKind::Multiple {\n            // value: AccordionMultiple::none(),\n            // default_value: AccordionMultiple::none(),\n            // on_value_change: None\n            // }\n            <AccordionItemDemo value=\"item-1\">\n                <AccordionTriggerDemo>\"Is it accessible?\"</AccordionTriggerDemo>\n                <AccordionContentDemo>\n                    \"Yes. It adheres to the WAI-ARIA design pattern.\"\n                </AccordionContentDemo>\n            </AccordionItemDemo>\n\n            <AccordionItemDemo value=\"item-2\">\n                <AccordionTriggerDemo>\"Is it unstyled?\"</AccordionTriggerDemo>\n                <AccordionContentDemo>\n                    \"Yes. It's unstyled by default, giving you freedom over the look and feel.\"\n                </AccordionContentDemo>\n            </AccordionItemDemo>\n\n            <AccordionItemDemo value=\"item-3\">\n                <AccordionTriggerDemo>\"Can it be animated?\"</AccordionTriggerDemo>\n                <AccordionContentDemo>\n                    \"Yes! You can animate the Accordion with CSS or Rust.\"\n                </AccordionContentDemo>\n            </AccordionItemDemo>\n        </PrimitiveAccordionRoot>\n    }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\nfn AccordionItemDemo(\n    #[prop(into)] value: MaybeSignal<String>,\n    children: ChildrenFn,\n) -> impl IntoView {\n    view! {\n        <PrimitiveAccordionItem value=value attr:class=\"border-b\">\n            {children()}\n        </PrimitiveAccordionItem>\n    }\n}\n\n#[component]\nfn AccordionTriggerDemo(children: ChildrenFn) -> impl IntoView {\n    let children = StoredValue::new(children);\n\n    view! {\n        <PrimitiveAccordionHeader attr:class=\"flex\">\n            <PrimitiveAccordionTrigger attr:class=\"flex items-center justify-between flex-1 py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\">\n                {children.with_value(|children| children())}\n                <ChevronDown\n                    attr:class=\"transition-transform duration-200 shrink-0 size-4\"\n                    attr:aria-hidden=true.into_attribute()\n                />\n            </PrimitiveAccordionTrigger>\n        </PrimitiveAccordionHeader>\n    }\n}\n\n#[component]\nfn AccordionContentDemo(children: ChildrenFn) -> impl IntoView {\n    view! {\n        <PrimitiveAccordionContent attr:class=\"mb-4 overflow-hidden text-sm transition-all\">\n            <div class=\"px-5 py-[15px] data-[state=closed]:animate-accordionUp data-[state=open]:animate-accordionDown\">\n                {children()}\n            </div>\n        </PrimitiveAccordionContent>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_primitives",
  "type_short": "components:demos"
}