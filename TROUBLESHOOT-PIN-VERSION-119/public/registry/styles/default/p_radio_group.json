{
  "name": "p_radio_group",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "p_radio_group.rs",
      "content": "use leptos::{html::AnyElement, *};\nuse wasm_bindgen::JsCast;\nuse web_sys::{FocusEvent, HtmlButtonElement, KeyboardEvent};\n\nuse crate::{\n    registry::primitives::{\n        p_primitive::Primitive,\n        p_radio::{Radio, RadioIndicator},\n        p_roving_focus::{RovingFocusGroup, RovingFocusGroupItem},\n        p_utils_create_controllable_signal::{\n            create_controllable_signal, CreateControllableSignalProps,\n        },\n        Attributes,\n    },\n    registry::primitives::{Direction, Orientation},\n};\n\n#[derive(Clone)]\nstruct RadioGroupContextValue {\n    name: MaybeProp<String>,\n    required: Signal<bool>,\n    disabled: Signal<bool>,\n    value: Signal<Option<String>>,\n    on_value_change: Callback<String>,\n}\n\n#[component]\npub fn RadioGroupRoot(\n    #[prop(optional, into)] name: MaybeProp<String>,\n    #[prop(optional, into)] required: MaybeSignal<bool>,\n    #[prop(optional, into)] disabled: MaybeSignal<bool>,\n    #[prop(optional, into)] should_loop: MaybeSignal<bool>,\n    #[prop(optional, into)] value: MaybeProp<String>,\n    #[prop(optional, into)] default_value: MaybeProp<String>,\n    #[prop(optional, into)] orientation: MaybeSignal<Orientation>,\n    #[prop(optional, into)] direction: MaybeSignal<Direction>,\n    #[prop(default=(|_|{}).into(), into)] on_value_change: Callback<String>,\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    children: ChildrenFn,\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n) -> impl IntoView {\n    let (value, set_value) = create_controllable_signal(CreateControllableSignalProps {\n        value: Signal::derive(move || value.get()),\n        default_value: Signal::derive(move || default_value.get()),\n        on_change: on_value_change,\n    });\n\n    provide_context(RadioGroupContextValue {\n        name,\n        required: Signal::derive(move || required.get()),\n        disabled: Signal::derive(move || disabled.get()),\n        value: Signal::derive(move || value.get()),\n        on_value_change: Callback::new(move |value| {\n            set_value.set(value);\n        }),\n    });\n\n    let children = StoredValue::new(children);\n\n    view! {\n        <RovingFocusGroup\n            as_child=true\n            orientation=Signal::derive(move || orientation.get())\n            direction=Signal::derive(move || direction.get())\n            should_loop=should_loop\n        >\n            <Primitive\n                {..attrs.clone()}\n                attr:role=\"radiogroup\"\n                attr:aria-required=required\n                attr:aria-orientation=move || orientation.get().to_string()\n                attr:data-disabled=disabled\n                attr:dir=move || direction.get().to_string()\n                element=html::fieldset\n                node_ref=node_ref\n                as_child=as_child\n            >\n                {children.with_value(|children| children())}\n            </Primitive>\n        </RovingFocusGroup>\n    }\n}\n\n#[allow(unused_variables)]\n#[component]\npub fn RadioGroupItem(\n    #[prop(optional, into)] disabled: MaybeSignal<bool>,\n    #[prop(into)] value: MaybeSignal<String>,\n    #[prop(default=(|_|{}).into(), into)] on_focus: Callback<FocusEvent>,\n    #[prop(default=(|_|{}).into(), into)] on_key_down: Callback<KeyboardEvent>,\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    children: ChildrenFn,\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n) -> impl IntoView {\n    let RadioGroupContextValue {\n        disabled,\n        value: context_value,\n        required,\n        name,\n        on_value_change,\n    } = use_context().expect(\"RadioGroupItem must be used in a RadioGroupRoot component\");\n\n    let is_disabled = Signal::derive(move || disabled.get() || disabled.get());\n\n    let is_checked_value = value.clone();\n    let is_checked = Signal::derive(move || context_value.get() == Some(is_checked_value.get()));\n    let is_arrow_key_pressed = StoredValue::new(false);\n\n    // _ = use_event_listener(use_document(), keydown, move |ev: KeyboardEvent| {\n    //   if [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].contains(&ev.key().as_str()) {\n    //     is_arrow_key_pressed.set_value(true);\n    //   }\n    // });\n\n    // _ = use_event_listener(use_document(), keyup, move |ev: KeyboardEvent| {\n    //   is_arrow_key_pressed.set_value(false);\n    // });\n\n    let children = StoredValue::new(children);\n    let value = StoredValue::new(value);\n\n    view! {\n        <RovingFocusGroupItem\n            as_child=true\n            focusable=Signal::derive(move || !is_disabled.get())\n            active=is_checked\n        >\n            <Radio\n                value=value.get_value()\n                disabled=is_disabled\n                required=required\n                checked=is_checked\n                name=name.clone()\n                on_check=Callback::new(move |_| on_value_change.call(value.get_value().get()))\n                on:keydown=move |ev: KeyboardEvent| {\n                    leptos::Callable::call(&on_key_down, ev.clone());\n                    if ev.key() == \"Enter\" {\n                        ev.prevent_default();\n                    }\n                }\n                on:focus=move |ev: FocusEvent| {\n                    leptos::Callable::call(&on_focus, ev.clone());\n                    if is_arrow_key_pressed.get_value() {\n                        let Some(node) = node_ref.get() else {\n                            return;\n                        };\n                        let Some(node_el) = node.dyn_ref::<HtmlButtonElement>() else {\n                            return;\n                        };\n                        node_el.click();\n                    }\n                }\n                node_ref=node_ref\n                attrs=attrs.clone()\n                as_child=as_child\n            >\n                {children.with_value(|children| children())}\n            </Radio>\n        </RovingFocusGroupItem>\n    }\n}\n\n#[component]\npub fn RadioGroupIndicator(\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    #[prop(optional)] children: Option<ChildrenFn>,\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n) -> impl IntoView {\n    let children = StoredValue::new(children);\n\n    view! {\n        <RadioIndicator attrs=attrs node_ref=node_ref as_child=as_child>\n            {children.with_value(|children| children.as_ref().map(|children| children()))}\n        </RadioIndicator>\n    }\n}\n"
    }
  ],
  "type": "components:primitives/",
  "type_short": "components:primitives"
}