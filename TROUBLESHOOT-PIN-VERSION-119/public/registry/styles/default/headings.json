{
  "name": "headings",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "headings.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\n// TODO 🐛 tw_merge!() working for all execpt what's inside (text-3xl, text-2xl, etc.)\n// TODO. └──> I tried different way of doing this (cf. H1 and H2), but not working\n\n// TODO 💪 Export Motion to _shared.rs (not working yet with #[tw(class = ...)] typically that do not support expanding constants directly)\n\n#[derive(TwClass, Default)]\n#[tw(class = \"font-bold text-pretty\")]\npub struct Heading {\n    variant: HeadingVariant,\n}\n\n#[component]\npub fn H1(\n    #[prop(into, optional)] variant: MaybeSignal<HeadingVariant>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into, optional)] style: MaybeSignal<String>,\n    #[prop(into, optional)] key: MaybeSignal<i32>, // Used to force rerender\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        let variant = variant.get();\n        let heading = Heading {\n            variant,\n        };\n        tw_merge!(heading.with_class(class.get()), \"text-4xl\")\n    });\n\n    view! {\n        <h1 {..attributes} class=class style=style key=key.get()>\n            {children()}\n        </h1>\n    }\n}\n\n#[component]\npub fn H2(\n    #[prop(into, optional)] variant: MaybeSignal<HeadingVariant>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        let variant = variant.get();\n        let heading = Heading {\n            variant,\n        };\n        tw_merge!(heading.with_class(class.get()), \"text-3xl\")\n    });\n\n    view! {\n        <h2 {..attributes} class=class>\n            {children()}\n        </h2>\n    }\n}\n\n#[component]\npub fn H3(\n    #[prop(into, optional)] variant: MaybeSignal<HeadingVariant>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        let variant = variant.get();\n        let heading = Heading {\n            variant,\n        };\n        tw_merge!(heading.with_class(class.get()), \"text-2xl\")\n    });\n\n    view! {\n        <h3 {..attributes} class=class>\n            {children()}\n        </h3>\n    }\n}\n\n#[component]\npub fn H4(\n    #[prop(into, optional)] variant: MaybeSignal<HeadingVariant>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        let variant = variant.get();\n        let heading = Heading {\n            variant,\n        };\n        tw_merge!(heading.with_class(class.get()), \"text-xl\")\n    });\n\n    view! {\n        <h4 {..attributes} class=class>\n            {children()}\n        </h4>\n    }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                        🧬 STRUCT 🧬                         */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[derive(TwVariant)]\npub enum HeadingVariant {\n    #[tw(default, class = \"text-pretty\")]\n    Default,\n    #[tw(\n        class = \"tracking-tighter text-transparent bg-gradient-to-r from-white to-gray-500 bg-clip-text\"\n    )]\n    Modern,\n    #[tw(\n        class = \"underline underline-offset-3 decoration-8 decoration-neutral-400 dark:decoration-neutral-600\"\n    )]\n    Underline,\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}