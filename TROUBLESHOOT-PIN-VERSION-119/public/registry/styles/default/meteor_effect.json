{
  "name": "meteor_effect",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "meteor_effect.rs",
      "content": "use leptos::*;\nuse rand::Rng;\nuse tailwind_fuse::*;\n\n#[component]\npub fn MeteorEffect(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"relative w-full max-w-[320px]\", class()));\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n\n#[component]\npub fn Meteors(#[prop(optional)] number: Option<usize>) -> impl IntoView {\n    const DEFAULT_NUMBER_METEORS: usize = 20;\n\n    let number_of_meteors = number.unwrap_or(DEFAULT_NUMBER_METEORS);\n    let mut rng = rand::thread_rng();\n\n    let meteors = (0..number_of_meteors).map(|_| {\n        let left = rng.gen_range(-400..=400);\n        let animation_delay = rng.gen_range(0.2..=0.8);\n        let animation_duration = rng.gen_range(2..=10);\n\n        view! {\n            <Meteor style=format!(\n                \"top:0;left:{}px;animation-delay:{}s;animation-duration:{}s\",\n                left,\n                animation_delay,\n                animation_duration,\n            ) />\n        }\n    });\n\n    view! { <>{meteors.collect::<Vec<_>>()}</> }\n}\n\n#[component]\npub fn Meteor(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    #[prop(into)] style: MaybeSignal<String>,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"absolute top-1/2 left-1/2 w-0.5 h-0.5 animate-meteor-effect rotate-[215deg] rounded-[9999px] bg-slate-500 shadow-[0_0_0_1px_#ffffff10] before:absolute before:top-1/2 before:h-[1px] before:w-[50px] before:-translate-y-[50%] before:transform before:bg-gradient-to-r before:from-[#64748b] before:to-transparent before:content-[&#x27;&#x27;]\",\n            class()\n        )\n    });\n\n    view! { <span {..attributes} class=class style=style /> }\n}\n\n#[component]\npub fn MeteorCard(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"flex overflow-hidden relative flex-col p-6 bg-gray-900 rounded-2xl border\",\n            class()\n        )\n    });\n\n    view! {\n        <div {..attributes} class=class>\n            {children()}\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}