{
  "name": "demo_use_clipboard",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_clipboard.rs",
      "content": "use leptos::*;\n\n#[cfg(feature = \"hydrate\")]\nuse leptos_use::docs::Note;\n\n#[cfg(feature = \"hydrate\")]\nuse crate::registry::ui::button::Button;\n#[cfg(feature = \"hydrate\")]\nuse crate::registry::ui::input::Input;\n#[cfg(feature = \"hydrate\")]\nuse leptos_use::{\n    use_clipboard_with_options, use_permission, UseClipboardOptions, UseClipboardReturn,\n};\n\n#[component]\npub fn DemoUseClipboard() -> impl IntoView {\n    #[cfg(feature = \"hydrate\")]\n    let clipboard_component = {\n        let (input, set_input) = create_signal(\"\".to_owned());\n\n        let UseClipboardReturn {\n            is_supported,\n            text,\n            copied,\n            copy,\n        } = use_clipboard_with_options(UseClipboardOptions::default().read(true));\n\n        let permission_read = use_permission(\"clipboard-read\");\n        let permission_write = use_permission(\"clipboard-write\");\n\n        view! {\n            <Show\n                when=is_supported\n                fallback=|| view! { <p>\"Your browser does not support the Clipboard API\"</p> }\n            >\n                <Note>\n                    \"Clipboard Permission:\" \" read \" <b>{move || permission_read().to_string()}</b>\n                    \" | \" \"write \" <b>{move || permission_write().to_string()}</b>\n                </Note>\n                <p>\n                    \"Currently copied: \" <code>{move || text().unwrap_or(\"none\".to_owned())}</code>\n                </p>\n                // value=input\n                <div class=\"flex gap-4\">\n                    <Input\n                        on:input=move |e| set_input(event_target_value(&e))\n                        r#type=\"text\"\n                        class=\"w-[270px]\"\n                    />\n\n                    <Button on:click={\n                        let copy = copy.clone();\n                        move |_| copy(&input())\n                    }>\n                        <Show when=copied fallback=|| \"Copy\">\n                            \"Copied!\"\n                        </Show>\n                    </Button>\n                </div>\n            </Show>\n        }\n    };\n\n    #[cfg(not(feature = \"hydrate\"))]\n    let clipboard_component = view! { <p>\"Clipboard functionality is not available on the server. TODO ðŸ‘‰ Fix this.\"</p> };\n\n    view! { <div>{clipboard_component}</div> }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}