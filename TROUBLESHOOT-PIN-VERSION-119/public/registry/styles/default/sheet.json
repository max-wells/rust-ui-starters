{
  "name": "sheet",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "sheet.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\nuse crate::registry::icons::others::x::X;\nuse crate::registry::ui::button::{Button, ButtonVariant};\n\n// TODO. Improve the use of Button in SheetTrigger\n// TODO. USe Heading variants from Headings\n\npub type SheetVariant = ButtonVariant;\n\n//\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn SheetTrigger(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into, optional)] variant: MaybeSignal<SheetVariant>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button {..attributes} class=class variant=variant>\n            {children()}\n        </Button>\n    }\n}\n\n#[component]\npub fn SheetDescription(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <p {..attributes} class=class>\n            {children()}\n        </p>\n    }\n}\n\n#[component]\npub fn SheetTitle(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"font-bold text-2XL\", class()));\n\n    view! {\n        <h2 {..attributes} class=class>\n            {children()}\n        </h2>\n    }\n}\n\n#[component]\npub fn SheetCancel(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into, optional)] variant: MaybeSignal<ButtonVariant>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| tw_merge!(\"\", class()));\n\n    view! {\n        <Button {..attributes} class=class variant=variant>\n            {children()}\n        </Button>\n    }\n}\n\n//\n// Update the SheetContent component\n#[component]\npub fn SheetContent(\n    #[prop(into)] is_open: MaybeSignal<bool>,\n    #[prop(into, optional, default = SheetDirection::Right.into())] direction: MaybeSignal<\n        SheetDirection,\n    >, // Default to Right\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let outer_class = create_memo(move |_| {\n        let direction = direction.get();\n        tw_merge!(\n            \"fixed shadow-lg transform transition-transform duration-300\",\n            direction.initial_position(),\n            direction.to_class(is_open()),\n            class()\n        )\n    });\n\n    let inner_class = create_memo(move |_| {\n        let base_class =\n            \"p-4 h-screen bg-card transition-opacity duration-300 z-50   overflow-y-auto shortfix-sidenav-todo-properly\";\n        let opacity_class = if is_open() {\n            \"opacity-100\"\n        } else {\n            \"opacity-0 pointer-events-none\"\n        };\n        tw_merge!(base_class, opacity_class)\n    });\n\n    view! {\n        <div {..attributes} class=outer_class>\n            <div class=inner_class>\n                <button class=\"absolute top-0 right-0 m-2\">\n                    <X class=\"size-6\" />\n                </button>\n                {children()}\n            </div>\n        </div>\n    }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n// Define the Direction enum\n#[derive(Clone, Copy)]\npub enum SheetDirection {\n    Right,\n    Left,\n    Top,\n    Bottom,\n}\n\n// Implement a method to get the corresponding class for each direction\nimpl SheetDirection {\n    fn to_class(self, is_open: bool) -> &'static str {\n        match self {\n            SheetDirection::Right => {\n                if is_open {\n                    \"translate-x-0\"\n                } else {\n                    \"translate-x-full\"\n                }\n            }\n            SheetDirection::Left => {\n                if is_open {\n                    \"translate-x-0\"\n                } else {\n                    \"-translate-x-full\"\n                }\n            }\n            SheetDirection::Top => {\n                if is_open {\n                    \"translate-y-0\"\n                } else {\n                    \"-translate-y-full\"\n                }\n            }\n            SheetDirection::Bottom => {\n                if is_open {\n                    \"translate-y-0\"\n                } else {\n                    \"translate-y-full\"\n                }\n            }\n        }\n    }\n\n    fn initial_position(self) -> &'static str {\n        match self {\n            SheetDirection::Right => \"top-0 right-0 h-full w-64\",\n            SheetDirection::Left => \"top-0 left-0 h-full w-64\",\n            SheetDirection::Top => \"top-0 left-0 w-full h-64\",\n            SheetDirection::Bottom => \"bottom-0 left-0 w-full h-64\",\n        }\n    }\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}