{
  "name": "demo_scroll_area",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_scroll_area.rs",
      "content": "use leptos::*;\n\n#[cfg(feature = \"hydrate\")]\nuse crate::registry::primitives::p_scroll_area::{\n    PrimitiveScrollAreaCorner, PrimitiveScrollAreaRoot, PrimitiveScrollAreaScrollbar,\n    PrimitiveScrollAreaThumb, PrimitiveScrollAreaViewport,\n};\n#[cfg(feature = \"hydrate\")]\nuse crate::registry::primitives::Orientation;\n\n// #[cfg(feature = \"hydrate\")]\n// use crate::registry::primitives::scroll_area::CustomScrollAreaScrollbar;\n\n#[component]\npub fn DemoScrollArea() -> impl IntoView {\n    #[cfg(feature = \"hydrate\")]\n    let scroll_area_component = {\n        let tags = StoredValue::new(\n            (1..=50)\n                .rev()\n                .map(|num| format!(\"v1.2.0-beta.{num}\"))\n                .collect::<Vec<_>>(),\n        );\n\n        view! {\n            <PrimitiveScrollAreaRoot attr:class=\"w-[200px] h-[225px] rounded overflow-hidden border\">\n                <PrimitiveScrollAreaViewport attr:class=\"w-full h-full rounded\">\n                    <div class=\"px-5 py-[15px]\">\n                        <div class=\"font-medium\">\"Tags\"</div>\n                        <For each=move || tags.get_value() key=|n| n.clone() let:data>\n                            <div class=\"pt-2.5 mt-2.5 border-t\">{data}</div>\n                        </For>\n                    </div>\n                </PrimitiveScrollAreaViewport>\n\n                // TODO. Not working properly... Keeps in Loading MDX component... state.\n                // <CustomPrimitiveScrollAreaScrollbar>\n                <PrimitiveScrollAreaScrollbar\n                    attr:class=\"flex select-none touch-none p-0.5 bg-[#dddddd] dark:bg-[#222] transition-colors duration-[160ms] ease-out hover:bg-[#dddddd] dark:hover:bg-[#222] data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                    orientation=Orientation::Vertical\n                >\n                    <PrimitiveScrollAreaThumb attr:class=\"flex-1 bg-[#b9b9b9] dark:bg-[#555]  rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                </PrimitiveScrollAreaScrollbar>\n                // <CustomPrimitiveScrollAreaScrollbar>\n\n                <PrimitiveScrollAreaScrollbar\n                    attr:class=\"flex select-none touch-none p-0.5 bg-[#dddddd] dark:bg-[#222] transition-colors duration-[160ms] ease-out hover:bg-[#dddddd] dark:hover:bg-[#222] data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                    orientation=Orientation::Horizontal\n                >\n                    <PrimitiveScrollAreaThumb attr:class=\"flex-1 bg-[#b9b9b9] dark:bg-[#555]  rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                </PrimitiveScrollAreaScrollbar>\n                <PrimitiveScrollAreaCorner attr:class=\"bg-[#dddddd] dark:bg-[#222]\" />\n            </PrimitiveScrollAreaRoot>\n        }\n    };\n\n    #[cfg(not(feature = \"hydrate\"))]\n    let scroll_area_component = view! {\n        <p>\n            \"Scroll area functionality is not available on the server. This component requires client-side hydration.\"\n        </p>\n    };\n\n    view! { <div>{scroll_area_component}</div> }\n}\n"
    }
  ],
  "type": "components:demos/demo_primitives",
  "type_short": "components:demos"
}