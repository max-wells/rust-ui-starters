{
  "name": "demo_cards_follow_shadow",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_cards_follow_shadow.rs",
      "content": "use leptos::*;\nuse leptos_meta::Stylesheet;\nuse tailwind_fuse::*;\n\nuse crate::registry::icons::others::check::Check;\n\n#[component]\npub fn DemoCardsFollowShadow() -> impl IntoView {\n    view! {\n        <Stylesheet id=\"cards-follow-shadow\" href=\"/components/cards-follow-shadow.css\" />\n        <script src=\"/components/cards-follow-shadow.js\" />\n\n        <CardShadowGrid>\n            <CardShadowItem />\n            <CardShadowItem />\n            <CardShadowItem />\n            <CardShadowItem />\n        </CardShadowGrid>\n    }\n}\n\n/*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n/*                     ✨ FUNCTIONS ✨                        */\n/*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n#[component]\npub fn CardShadowGrid(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"relative grid grid-cols-2 p-0 m-0 list-none\", \n        \"after:content-[''] after:absolute after:rounded-lg after:bg-[hsl(0,0%,10%)] after:pointer-events-none after:-z-10 after:transition-[inset] after:duration-200 after:-z-10\", \n        class())\n    });\n\n    view! {\n        <ul {..attributes} class=class>\n            {children()}\n        </ul>\n    }\n}\n\n#[component]\npub fn CardShadowItem() -> impl IntoView {\n    view! {\n        <li class=\"p-4 list-none\">\n            <ArticleCard>\n                <Check />\n                <h3>\"Title\"</h3>\n                <p class=\"m-0 text-transparent bg-clip-text bg-gradient-to-b from-[hsl(0,0%,80%)] to-[hsl(0,0%,50%)] font-[80]\">\n                    \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Minima alias fuga et ab magnam aliquam commodi ratione vel fugit nesciunt voluptatibus.\"\n                </p>\n            </ArticleCard>\n        </li>\n    }\n}\n\n#[component]\npub fn ArticleCard(\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        tw_merge!(\n            \"grid relative gap-1 p-4\",\n            \"before:content-[''] before:absolute before:inset-0\",\n            \"before:bg-gradient-to-r before:from-[var(--bg)] before:to-transparent\",\n            \"before:bg-[length:40px_40px] before:bg-[position:-20px_-20px]\",\n            \"before:mask-[linear-gradient(-35deg,var(--bg)_0%,transparent_45%)]\",\n            \"before:z-[-1] before:opacity-[var(--li-active,0)] before:transition-opacity\",\n            // AFTER\n            \"after:content-[''] after:absolute after:inset-0\",\n            \"after:z-[-2] after:bg-[hsl(0,0%,10%)]\",\n            \"after:rounded-[1rem]\",\n            \"after:opacity-[var(--li-active,0)] after:transition-opacity\",\n            class()\n        )\n    });\n\n    view! {\n        <article {..attributes} class=class>\n            {children()}\n        </article>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_extensions",
  "type_short": "components:demos"
}