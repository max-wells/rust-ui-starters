{
  "name": "button",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "button.rs",
      "content": "use leptos::*;\nuse tailwind_fuse::*;\n\n// TODO ðŸ’ª Loading state (demo_use_timeout_fn.rs and demo_button.rs)\n\n#[component]\npub fn Button(\n    #[prop(into, optional)] variant: MaybeSignal<ButtonVariant>,\n    #[prop(into, optional)] size: MaybeSignal<ButtonSize>,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n    #[prop(into, optional)] id: MaybeSignal<String>,\n    #[prop(into, optional)] formmethod: MaybeSignal<String>,\n    #[prop(into, optional)] value: MaybeSignal<String>,\n    #[prop(into, optional)] role: MaybeSignal<String>,\n    #[prop(into, optional)] disabled: MaybeSignal<bool>,\n    #[prop(into, optional)] r#type: MaybeSignal<String>, // Added type prop\n    #[prop(into, optional)] popovertarget: MaybeSignal<String>, // Added popovertarget prop\n    #[prop(into, optional)] popovertargetaction: MaybeSignal<String>, // Added popovertargetaction prop\n    #[prop(attrs)] attributes: Vec<(&'static str, Attribute)>,\n    children: Children,\n) -> impl IntoView {\n    let class = create_memo(move |_| {\n        let variant = variant.get();\n        let size = size.get();\n        let button = ButtonClass {\n            variant,\n            size,\n        };\n        button.with_class(class.get())\n    });\n\n    view! {\n        <button\n            {..attributes}\n            class=class\n            disabled=disabled\n            id=id\n            role=role\n            type=r#type\n            formmethod=formmethod\n            value=value\n            popovertarget=popovertarget\n            popovertargetaction=popovertargetaction\n        >\n            {children()}\n        </button>\n    }\n}\n\n/*Â´:Â°â€¢.Â°+.*â€¢Â´.*:Ëš.Â°*.Ëšâ€¢Â´.Â°:Â°â€¢.Â°â€¢.*â€¢Â´.*:Ëš.Â°*.Ëšâ€¢Â´.Â°:Â°â€¢.Â°+.*â€¢Â´.*:*/\n/*                        ðŸ§¬ STRUCT ðŸ§¬                         */\n/*.â€¢Â°:Â°.Â´+Ëš.*Â°.Ëš:*.Â´â€¢*.+Â°.â€¢Â°:Â´*.Â´â€¢*.â€¢Â°.â€¢Â°:Â°.Â´:â€¢ËšÂ°.*Â°.Ëš:*.Â´+Â°.â€¢*/\n\n#[derive(TwClass, Default)]\n#[tw(\n    class = \"inline-flex items-center justify-center text-sm font-medium transition-colors rounded-md w-fit whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\"\n)]\npub struct ButtonClass {\n    variant: ButtonVariant,\n    size: ButtonSize,\n}\n\n/*Â´:Â°â€¢.Â°+.*â€¢Â´.*:Ëš.Â°*.Ëšâ€¢Â´.Â°:Â°â€¢.Â°â€¢.*â€¢Â´.*:Ëš.Â°*.Ëšâ€¢Â´.Â°:Â°â€¢.Â°+.*â€¢Â´.*:*/\n/*                     âœ¨ FUNCTIONS âœ¨                        */\n/*.â€¢Â°:Â°.Â´+Ëš.*Â°.Ëš:*.Â´â€¢*.+Â°.â€¢Â°:Â´*.Â´â€¢*.â€¢Â°.â€¢Â°:Â°.Â´:â€¢ËšÂ°.*Â°.Ëš:*.Â´+Â°.â€¢*/\n\n#[derive(TwVariant)]\npub enum ButtonVariant {\n    #[tw(\n        default,\n        class = \"shadow bg-primary text-primary-foreground hover:bg-primary/90\"\n    )]\n    Default,\n    #[tw(class = \"shadow-sm bg-secondary text-secondary-foreground hover:bg-secondary/80\")]\n    Secondary,\n    #[tw(class = \"shadow-sm bg-destructive text-destructive-foreground hover:bg-destructive/90\")]\n    Destructive,\n    #[tw(class = \"shadow-sm bg-warning text-warning-foreground hover:bg-warning/90\")]\n    Warning,\n    #[tw(class = \"shadow-sm bg-success text-success-foreground hover:bg-success/90\")]\n    Success,\n    #[tw(\n        class = \"border shadow-sm border-input bg-background hover:bg-accent hover:text-accent-foreground\"\n    )]\n    Outline,\n    #[tw(class = \"hover:bg-accent hover:text-accent-foreground\")]\n    Ghost,\n    #[tw(class = \"text-primary underline-offset-4 hover:underline\")]\n    Link,\n}\n\n#[derive(TwVariant)]\npub enum ButtonSize {\n    #[tw(class = \"h-8 px-3 text-xs\")]\n    Sm,\n    #[tw(default, class = \"px-4 py-2 h-9\")]\n    Default,\n    #[tw(class = \"h-10 px-8\")]\n    Lg,\n    #[tw(class = \"size-8\")]\n    Icon,\n}\n"
    }
  ],
  "type": "components:ui/",
  "type_short": "components:ui"
}