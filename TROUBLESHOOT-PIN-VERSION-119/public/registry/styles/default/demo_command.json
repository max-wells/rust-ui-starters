{
  "name": "demo_command",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_command.rs",
      "content": "use leptos::*;\n\nuse crate::registry::ui::{\n    command::{\n        Command, CommandContext, CommandGroup, CommandInput, CommandItem, CommandList,\n        CommandProvider,\n    },\n    separator::Separator,\n};\n\n#[component]\npub fn DemoCommand() -> impl IntoView {\n    // List of demo items with name and href\n    let items_components = vec![\n        (\"Button\", \"/demos-core/button\"),\n        (\"Checkbox\", \"/demos-core/checkbox\"),\n        (\"Dialog\", \"/demos-core/dialog\"),\n        (\"Alert Dialog\", \"/demos-core/alert-dialog\"),\n    ];\n\n    let items_hooks = vec![\n        (\"Use Hover\", \"/demos-hooks/use-hover\"),\n        (\"Use Cycle List\", \"/demos-hooks/use-cycle-list\"),\n    ];\n\n    view! {\n        <div class=\"p-4\">\n            <CommandProvider>\n                <Command class=\"rounded-lg border shadow-md w-[450px]\">\n                    <CommandInput placeholder=\"Search Components & Hooks...\" />\n                    <CommandList>\n                        <CommandGroup heading=\"Components\">\n                            {move || {\n                                let context = use_context::<CommandContext>()\n                                    .expect(\"CommandContext not found\");\n                                let query = (context.search_query)().to_lowercase();\n                                items_components\n                                    .iter()\n                                    .filter(|(name, _)| name.to_lowercase().contains(&query))\n                                    .map(|&(name, href)| {\n                                        view! { <CommandItem href=href>{name}</CommandItem> }\n                                    })\n                                    .collect::<Vec<_>>()\n                            }}\n                        </CommandGroup>\n\n                        <Separator class=\"my-1\" />\n\n                        <CommandGroup heading=\"Hooks\">\n                            {move || {\n                                let context = use_context::<CommandContext>()\n                                    .expect(\"CommandContext not found\");\n                                let query = (context.search_query)().to_lowercase();\n                                items_hooks\n                                    .iter()\n                                    .filter(|(name, _)| name.to_lowercase().contains(&query))\n                                    .map(|&(name, href)| {\n                                        view! { <CommandItem href=href>{name}</CommandItem> }\n                                    })\n                                    .collect::<Vec<_>>()\n                            }}\n                        </CommandGroup>\n                    </CommandList>\n                </Command>\n            </CommandProvider>\n        </div>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_core",
  "type_short": "components:demos"
}