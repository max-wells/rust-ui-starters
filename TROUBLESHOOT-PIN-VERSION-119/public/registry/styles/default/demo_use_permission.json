{
  "name": "demo_use_permission",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "demo_use_permission.rs",
      "content": "use leptos::*;\nuse leptos_use::use_permission;\n\n#[component]\npub fn DemoUsePermission() -> impl IntoView {\n    let accelerometer = use_permission(\"accelerometer\");\n    let accessibility_events = use_permission(\"accessibility-events\");\n    let ambient_light_sensor = use_permission(\"ambient-light-sensor\");\n    let background_sync = use_permission(\"background-sync\");\n    let camera = use_permission(\"camera\");\n    let clipboard_read = use_permission(\"clipboard-read\");\n    let clipboard_write = use_permission(\"clipboard-write\");\n    let gyroscope = use_permission(\"gyroscope\");\n    let magnetometer = use_permission(\"magnetometer\");\n    let microphone = use_permission(\"microphone\");\n    let notifications = use_permission(\"notifications\");\n    let payment_handler = use_permission(\"payment-handler\");\n    let persistent_storage = use_permission(\"persistent-storage\");\n    let push = use_permission(\"push\");\n    let speaker = use_permission(\"speaker\");\n\n    view! {\n        <pre>\n            \"accelerometer: \" {move || accelerometer().to_string()} \"\\naccessibility_events: \"\n            {move || accessibility_events().to_string()} \"\\nambient_light_sensor: \"\n            {move || ambient_light_sensor().to_string()} \"\\nbackground_sync: \"\n            {move || background_sync().to_string()} \"\\ncamera: \" {move || camera().to_string()}\n            \"\\nclipboard_read: \" {move || clipboard_read().to_string()} \"\\nclipboard_write: \"\n            {move || clipboard_write().to_string()} \"\\ngyroscope: \"\n            {move || gyroscope().to_string()} \"\\nmagnetometer: \"\n            {move || magnetometer().to_string()} \"\\nmicrophone: \" {move || microphone().to_string()}\n            \"\\nnotifications: \" {move || notifications().to_string()} \"\\npayment_handler: \"\n            {move || payment_handler().to_string()} \"\\npersistent_storage: \"\n            {move || persistent_storage().to_string()} \"\\npush: \" {move || push().to_string()}\n            \"\\nspeaker: \" {move || speaker().to_string()}\n        </pre>\n    }\n}\n"
    }
  ],
  "type": "components:demos/demo_hooks",
  "type_short": "components:demos"
}