{
  "name": "p_toggle_custom",
  "cargo_dependencies": [],
  "files": [
    {
      "name": "p_toggle_custom.rs",
      "content": "use leptos::{html::AnyElement, Callable, *};\nuse tailwind_fuse::*;\nuse web_sys::MouseEvent;\n\nuse crate::registry::{\n    primitives::{\n        p_primitive_custom::PrimitiveCustom,\n        p_utils_create_controllable_signal::{\n            create_controllable_signal, CreateControllableSignalProps,\n        },\n        Attributes,\n    },\n    ui::_shared::STYLES,\n};\n\n#[component]\npub fn ToggleRootCustom(\n    #[prop(optional, into)] pressed: MaybeProp<bool>,\n    #[prop(optional, into)] default_pressed: MaybeProp<bool>,\n    #[prop(optional, into)] disabled: MaybeSignal<bool>,\n    #[prop(default=(|_|{}).into(), into)] on_pressed_changed: Callback<bool>,\n    #[prop(default=(|_|{}).into(), into)] on_click: Callback<MouseEvent>,\n    #[prop(optional)] node_ref: NodeRef<AnyElement>,\n    #[prop(attrs)] attrs: Attributes,\n    #[prop(optional, into)] as_child: MaybeProp<bool>,\n    children: ChildrenFn,\n    #[prop(into, optional)] class: MaybeSignal<String>,\n) -> impl IntoView {\n    let (pressed, set_pressed) = create_controllable_signal(CreateControllableSignalProps {\n        value: Signal::derive(move || pressed.get()),\n        default_value: Signal::derive(move || default_pressed.get()),\n        on_change: on_pressed_changed,\n    });\n\n    let class = create_memo(move |_| {\n        tw_merge!(\n            STYLES.FLEX_ITEMS_JUSTIFY_CENTER,\n            STYLES.RING_OFFSET_BG,\n            STYLES.FOCUS_VISIBLE_RING,\n            STYLES.BG_TRANSPARENT,\n            STYLES.TRANSITION_COLORS,\n            STYLES.DISABLED_EVENTS_NONE,\n            STYLES.DATA_STATE_ON_TOGGLE,\n            STYLES.WIDTH_FIT,\n            \"h-10 px-3\",\n            \"rounded-md text-sm font-medium\",\n            \"hover:bg-muted hover:text-muted-foreground\",\n            class()\n        )\n    });\n\n    view! {\n        <PrimitiveCustom\n            {..attrs}\n            attr:type=\"button\"\n            attr:aria-pressed=move || pressed.get().unwrap_or_default().to_string()\n            attr:data-state=move || { if pressed.get().unwrap_or_default() { \"on\" } else { \"off\" } }\n            attr:data-disabled=disabled\n            element=html::button\n            on:click=move |ev: MouseEvent| {\n                Callable::call(&on_click, ev.clone());\n                if !disabled.get() {\n                    set_pressed.update(|pressed| *pressed = Some(!pressed.unwrap_or(false)));\n                }\n            }\n            node_ref=node_ref\n            as_child=as_child\n            class=class\n        >\n            {children()}\n        </PrimitiveCustom>\n    }\n}\n"
    }
  ],
  "type": "components:primitives/",
  "type_short": "components:primitives"
}